cmake_minimum_required(VERSION 3.24)
project(Qtcef LANGUAGES CXX VERSION 0.1.0)

macro(qtcef_initialize)
    set(CMAKE_AUTOMOC ON)
    find_package(Qt6 REQUIRED COMPONENTS Widgets Concurrent)

    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CEF_ROOT}/cmake)
    set_property(GLOBAL PROPERTY OS_FOLDERS ON)
    set(USE_SANDBOX OFF)
    set(CEF_RUNTIME_LIBRARY_FLAG /MD)
    find_package(CEF REQUIRED)
    PRINT_CEF_CONFIG()
    SET_CEF_TARGET_OUT_DIR()
    if(OS_WINDOWS)
        set(NEED_NORMALIZE_NAMES CEF_LIB_DEBUG CEF_LIB_RELEASE CEF_BINARY_DIR CEF_RESOURCE_DIR CEF_TARGET_OUT_DIR CMAKE_MODULE_PATH)
        foreach(NEED_NORMALIZE_NAME ${NEED_NORMALIZE_NAMES})
            string(REPLACE \\ / NEW_VALUE ${${NEED_NORMALIZE_NAME}})
            set(${NEED_NORMALIZE_NAME} ${NEW_VALUE})
        endforeach()
    endif()
    ADD_LOGICAL_TARGET(libcef_lib ${CEF_LIB_DEBUG} ${CEF_LIB_RELEASE})
endmacro()

qtcef_initialize()
add_subdirectory(${CEF_LIBCEF_DLL_WRAPPER_PATH} libcef_dll_wrapper)
file(GLOB QTCEF_SOURCES source/*)
qt_add_library(Qtcef STATIC ${QTCEF_SOURCES})
target_link_libraries(Qtcef PRIVATE libcef_lib libcef_dll_wrapper ${CEF_STANDARD_LIBS} Qt::Concurrent)
target_link_libraries(Qtcef PUBLIC Qt::Widgets)
add_dependencies(Qtcef libcef_dll_wrapper)
SET_LIBRARY_TARGET_PROPERTIES(Qtcef)

function(qtcef_add_executable TARGET_NAME)
    if(ARGC LESS 2)
        message(FATAL_ERROR "Must provide source files.")
    endif()
    if(NOT PROJECT_NAME STREQUAL "Qtcef")
        qtcef_initialize()
    endif()
    set(LOOP_CONTINUE NO)
    unset(OUTPUT_NAME)
    unset(SOURCES)
    foreach(INDEX RANGE 1 ${ARGC})
        if(LOOP_CONTINUE)
            set(LOOP_CONTINUE NO)
            continue()
        endif()
        list(GET ARGV ${INDEX} ARG)

        if(ARG STREQUAL "OUTPUT_NAME")
            if(DEFINED OUTPUT_NAME)
                message(FATAL_ERROR "Parameter \"OUTPUT_NAME\" can not be set more than one time.")
            endif()
            math(EXPR NEXT_INDEX ${INDEX+1})
            if(NEXT_INDEX GREATER_EQUAL ARGC)
                message(FATAL_ERROR "Must exist a argument after parameter \"OUTPUT_NAME\".")
            endif()
            list(GET ARGV ${NEXT_INDEX} OUTPUT_NAME)
            set(LOOP_CONTINUE ON)
        else()
            list(SUBLIST ARGV ${INDEX} -1 SOURCES)
            break()
        endif()
    endforeach()
    if(NOT DEFINED OUTPUT_NAME)
        set(OUTPUT_NAME ${PROJECT_NAME})
    endif()
    if(NOT DEFINED SOURCES)
        message(FATAL_ERROR "Must exist at least one source files.")
    endif()

    qt_add_executable(${TARGET_NAME} WIN32 MACOSX_BUNDLE ${SOURCES})
    target_include_directories(${TARGET_NAME} PRIVATE ${Qtcef_SOURCE_DIR}/include)
    target_link_libraries(${TARGET_NAME} PRIVATE Qtcef)
    set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME ${OUTPUT_NAME})
    SET_EXECUTABLE_TARGET_PROPERTIES(${TARGET_NAME})

    if(OS_WINDOWS)
        set(SIMPLE_PATH ${CEF_ROOT}/tests/cefsimple)
        add_custom_command(
                TARGET ${TARGET_NAME}
                POST_BUILD
                COMMAND "mt.exe" -nologo
                -manifest \"${SIMPLE_PATH}/cefsimple.exe.manifest\" \"${SIMPLE_PATH}/compatibility.manifest\"
                -outputresource:"${CEF_TARGET_OUT_DIR}/${OUTPUT_NAME}.exe"\;\#1
                COMMENT "Adding manifest..."
        )
    elseif(OS_LINUX)
        set_target_properties(${PROJECT_NAME} PROPERTIES INSTALL_RPATH $ORIGIN)
        set_target_properties(${PROJECT_NAME} PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)
        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CEF_TARGET_OUT_DIR})
    endif()
    COPY_FILES(${PROJECT_NAME} "${CEF_BINARY_FILES}" ${CEF_BINARY_DIR} ${CEF_TARGET_OUT_DIR})
    COPY_FILES(${PROJECT_NAME} "${CEF_RESOURCE_FILES}" ${CEF_RESOURCE_DIR} ${CEF_TARGET_OUT_DIR})
endfunction()

if(PROJECT_IS_TOP_LEVEL)
    file(GLOB TEMPLATE_SOURCES template/*)
    qtcef_add_executable(template ${TEMPLATE_SOURCES})
endif()
